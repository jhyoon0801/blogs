<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome to jhyoon&#39;s blogs</title>
    <link>http://jhyoon0801.github.io/blogs/</link>
    <description>Recent content on Welcome to jhyoon&#39;s blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>us-en</language>
    <copyright>Copyright &amp;#169; by jhyoon</copyright>
    <lastBuildDate>Fri, 01 Apr 2016 14:00:00 +0000</lastBuildDate>
    <atom:link href="http://jhyoon0801.github.io/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spring MVC 기초 - 1</title>
      <link>http://jhyoon0801.github.io/blogs/blogs/spring-mvc-base-1/</link>
      <pubDate>Fri, 01 Apr 2016 14:00:00 +0000</pubDate>
      
      <guid>http://jhyoon0801.github.io/blogs/blogs/spring-mvc-base-1/</guid>
      <description>

&lt;h3 id=&#34;spring-mvc-기초-1:86650347214547cb075f66c4dc7127f9&#34;&gt;Spring MVC 기초 - 1&lt;/h3&gt;

&lt;p&gt;Spring MVC에 관련한 기초 내용을 정리해 나가자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;web-application-개발-관련-기본-정리:86650347214547cb075f66c4dc7127f9&#34;&gt;web application 개발 관련 기본 정리&lt;/h4&gt;

&lt;h5 id=&#34;web-server란:86650347214547cb075f66c4dc7127f9&#34;&gt;web server란?&lt;/h5&gt;

&lt;p&gt;HTTP 프로토콜을 사용하는 클라이언트로부터의 요청을 받아서, HTML(그림, CSS, 자바스트립트 등의 리소스를 포함한) 문서와 같은 리소스를 반환하는 컴퓨터 프로그램이다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;web-application이란:86650347214547cb075f66c4dc7127f9&#34;&gt;web application이란?&lt;/h5&gt;

&lt;p&gt;정적 데이터(정적 HTML 문서 등)가 아니라, 각각의 요청에 따라 동적 데이터(동적 HTML문서 등)를 생성하는 프로그램이며, 이 프로그램의 동작은 web server의 호출에 의해 수행된다. web application은 web server와는 별개의 프로세스로도 동작할 수 있고, 동일한 프로세스로도 동작할 수 있다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;web-container란:86650347214547cb075f66c4dc7127f9&#34;&gt;web container란?&lt;/h5&gt;

&lt;p&gt;servlet container라고도 불리며 웹 서버 안에서 servlet과 JSP를 지원하는 역할을 맡는 컴포넌트이다. web container는 servlet들의 lifecycle을 관리한다. URL과 이를 처리할 servlet의 mapping과 request 전달 등을 수행한다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;servlet이란:86650347214547cb075f66c4dc7127f9&#34;&gt;servlet이란?&lt;/h5&gt;

&lt;p&gt;java를 기반으로 하는 web application 프로그래밍 기술이다. web application을 작성한 클래스를 servlet 클래스라고 하며, 이 클래스는 javax.servlet.Servlet 인터페이스를 구현한 클래스이다. servlet은 web container가 servlet 클래스를 이용하여 객체를 생성하고, 그 객체를 초기화하여 웹 서비스를 할 수 있는 상태까지 만든 객체를 의미한다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;web-application-deployment-descriptor:86650347214547cb075f66c4dc7127f9&#34;&gt;web application deployment descriptor&lt;/h5&gt;

&lt;p&gt;WAS의 web application 디렉터리의 WEB-INF 서브디렉터리 아래에 있는 web.xml 파일을 의미한다. 해당 파일은 web applcation이 시작될 때 메모리에 로딩되며, 내용이 수정될 경우 web applicaton을 재실행해야 한다. WADD 파일에는 ServletContext의 초기 파라미터, Session의 유효시간 설정, Servlet/JSP에 대한 정의, Servlet/JSP 매핑, Mime Type 매핑, Welcome File list, Error Pages 처리, 리스너/필터, 보안 설정 등에 대한 web application과 관련된 내용이 작성된다.
&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;springmvc의-bootstrap:86650347214547cb075f66c4dc7127f9&#34;&gt;SpringMVC의 bootstrap&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; servlet container(3.0+)가 실행될 때, SpringServletContainerInitializer를 bootstapping 시키고, SpringServletContainerInitializer는 WebApplicationInitializer를 implements한 class를 찾아내어 onStartup()를 수행한다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; SpringServeltContainerInitializer는 Servlet 3.0의 ServletContainerInitializer를 impelements한 class이다. 이 클래스는 WebApplicationInitializer를 이용하여 web application의 설정 정보를 java code 기반으로 작성한다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; WebApplicationInitializer는 servlet 3.0+ 스펙에서 ServletContext를 기존의 WADD(web.xml)를 통해 설정하는 방법 이외에 programmatically하게 지원하는 interface이다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; ContextLoaderListener와 DispatcherServlet은 각각 WebApplicationContext(WAC)를 생성하는데, ContextLoaderListener가 생성한 WAC는 root-context가 되고, DispatcherServlet이 생성한 인스턴스는 root-context를 부모로 하는 child-context가 된다. child-context 들은 root-context의 bean을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;spring-put:86650347214547cb075f66c4dc7127f9&#34;&gt;! Spring PUT&lt;/h4&gt;

&lt;p&gt;Servlet specification에서 POST만 form field에 접근할 수 있도록 제한이 생김. 이를 위해 Spring에서는 HttpPutFormContentFilter를 도입함. 관련하여 주의하도록 하자.&lt;/p&gt;

&lt;p&gt;참조 : &lt;a href=&#34;http://m.blog.daum.net/rollin/8097064&#34;&gt;http://m.blog.daum.net/rollin/8097064&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;spring-mvc-설정:86650347214547cb075f66c4dc7127f9&#34;&gt;Spring MVC 설정&lt;/h4&gt;

&lt;p&gt;Spring MVC의 java 기반 configuration은 @EnableWebMvc 어노테이션과 함께 WebMvcConfigurerAdapter 추상 class를 확장하여 기능을 추가할 method들만 override하여 구현한다. WebMvcConfigurerAdapter 추상 class는 WebMvcConfigurer 인터페이스를 구현한 추상 class이다.
&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>켄트 벡의 구현 패턴</title>
      <link>http://jhyoon0801.github.io/blogs/blogs/summary-implementation-pattern/</link>
      <pubDate>Wed, 30 Mar 2016 15:00:00 +0000</pubDate>
      
      <guid>http://jhyoon0801.github.io/blogs/blogs/summary-implementation-pattern/</guid>
      <description>

&lt;p&gt;켄트 벡의 구현 패턴을 학습하고 내용을 요약해서 프로그램 작성 시 주기적으로 참고하자.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;책-글귀-모음:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;책 글귀 모음&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 패턴은 반복적으로 일어나는 문제에 대한 합리적인 해결책을 제공해서 프로그래머가 남는 시간과 에너지, 창의력을 진정 독창적인 문제 해결에 사용할 수 있게 해준다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 프로그래밍 이론은 프로그래밍을 어떻게 해야하고 왜 그렇게 해야 하는지에 대한 이유를 알려준다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; Knuth왈 프로그램은 책처럼 읽을 수 있어야 한다. 스토리와 리듬감을 지니고 상큼한 표현을 지녀야 한다.(Literate Programming, 글로 쓰는 프로그래밍)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 소프트웨어 비용의 대부분은 소프트웨어가 개발된 후에 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 복잡도를 낮추면 프로그램을 읽고 사용하고 수정하는 사람들이 프로그램을 훨씬 빨리 이해할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 과도한 복잡도를 제거하면 코드를 새로운 관점에서 바라볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 앞으로 이득을 얻을 수 있을지 불확실한 패턴의 경우에는 일단 사용을 자제하는 편이 좋다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 원칙을 명확히 이해하고 있다면, 새로운 상황에 부딪혔을 때 적절히 대처할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 각 패턴은 커뮤니케이션, 단순성, 유연성의 가치 중 하나 이상을 내포하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 패턴이란 프로그래밍에서 반복적으로 접하게 되는 문제를 구체적으로 해결하는 방법이다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 커뮤니케이션하기 쉬운 코드를 짬으로써, 유지 비용을 줄인다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 패턴을 사용하는 버릇을 들이면, 읽고 이해하고 수정하기 쉬운 코드를 작성할 수 있고, 더 빠르고 자연스럽게 코드를 짤 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 디자인 패턴은 클래스 간의 관계를 다루는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 플라톤은 현실 세계에 존재하는 것은 클래스의 인스턴스일 뿐이라고 이야기 했다네..&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;프로그래밍-이론:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;프로그래밍 이론&lt;/h3&gt;

&lt;p&gt;실제 프로그래밍에서는 각 패턴에서 설명하는 이론 외에도 가치와 원칙의 두 가지가 패턴의 결정 사항에 영향을 미친다. &lt;br&gt;
가치는 모든 프로그래밍에 적용되는 주제이며, 원칙은 어떤 패턴도 적용할 수 없는 경우나 두 개의 패턴 중 하나를 선택해야 할 경우 빛을 발한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;패턴은 지금 당장 무엇을 해야 할지를 알려주고, 가치는 패턴을 사용해야 하는 동기를 알려주며, 원칙은 동기를 행동으로 어떻게 바꿔줄지 알려준다.&lt;/em&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;가치:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;가치&lt;/h4&gt;

&lt;p&gt;최고의 프로그래머는 프로그램의 확장성을 고려해서 프로그램을 짜지만, 불필요한 요소를 사용하지 않으며, 읽고 이해하기 쉬운 프로그램을 짠다.&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;커뮤니케이션:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;커뮤니케이션&lt;/h5&gt;

&lt;p&gt;개발자가 코드를 쉽게 이해하고, 수정하고, 사용할 수 있다면 그 코드는 개발자와 커뮤니케이션을 하고 있다고 이야기할 수 있다.&lt;br&gt;
프로그램을 작성할 때 CPU 뿐만 아니라, 커뮤니케이션에 초점을 맞춰 타인을 고려하면 경제적으로도 높은 효과가 있다. 소프트웨어 비용의 대부분은 소프트웨어가 개발된 후에 발생하기 때문이다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;단순성:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;단순성&lt;/h5&gt;

&lt;p&gt;복잡도를 낮추면 사람들이 프로그램을 훨씬 빨리 이해할 수 있고, 이를 통해 경제적인 효과를 볼 수 있다. &lt;br&gt;
프로그램을 최대한 단순화하고, 의미없는 코드는 모두 제거하라. 설계시에도 과도한 요소는 모두 빼고, 요구 사항을 분석해서 꼭 필요한 사항만을 뽑아내어 복잡도를 제거하면 코드를 새로운 관점에서 바라볼 수 있다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;유연성:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;유연성&lt;/h5&gt;

&lt;p&gt;유연성은 비효율적인 코딩이나 설계를 정당화해주는 가치이다. 프로그램은 유연해야 하지만, 프로그램이 발전하는 방향으로 유연해야함을 꼭 생각하자.&lt;br&gt;
앞으로 이득이 있을지 없을지 모르는 불확실한 패턴을 사용하는 것 보단, 당장 이득을 얻을 수 있는 패턴을 사용한다.&lt;br&gt;
단순성은 유연성을 촉진시킨다. 단순한 프로그램은 수정이 매우 간단하기 때문이다.&lt;br&gt;
커뮤니케이션을 중시하면 유연성도 좋아진다. 읽기와 수정이 좋은 코드는 조직이 미래에 취할 수 있는 전략의 폭이 넓어진다.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;원칙:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;원칙&lt;/h4&gt;

&lt;p&gt;원칙은 가치에 비해 좀 더 프로그래밍에 특화된 개념이지만 가치와 함께 패턴의 근간을 이룬다.&lt;br&gt;
원칙을 이해하고 있다면 패턴을 사용하는 근본적인 이유에 대해 알 수 있으므로 새로운 상황에 부딪혔을 때 적절히 대처할 수 있다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;지역적-변화:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;지역적 변화&lt;/h5&gt;

&lt;p&gt;코드를 수정할 때 함께 바꿔야 하는 부분을 최소화한다. 지역적 변화만을 일으키는 코드는 커뮤니케이션이 쉽기 때문이다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;최소-중복:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;최소 중복&lt;/h5&gt;

&lt;p&gt;중복된 코드가 많으면 많을 수록 코드 수정은 어려워진다. 또한 단순히 코드만이 아닌 병렬 클래스 계층(parallel class hierarchy)도 중복의 일종이다. 프로그램상의 어떤 개념을 수정했을 때 2개 이상의 클래스 계층을 수정해야 한다면, 이러한 수정은 지역적 변화의 원칙을 위배하는 것이다.&lt;br&gt;
중복을 없애는 방법 중 한 가지는 프로그램을 여러 작은 부분으로 나누는 것이다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;로직과-데이터의-결합:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;로직과 데이터의 결합&lt;/h5&gt;

&lt;p&gt;보통 프로그램을 수정할 때는 로직과 데이터를 모두 수정해야할 경우가 많기 때문에, 데이터와 그 데이터를 처리하는 로직을 밀접하게 배치한다. 이는 프로그램을 수정하더라도 그 영향이 일정 영역에 머물게 된다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;대칭성:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;대칭성&lt;/h5&gt;

&lt;p&gt;코드의 대칭성은 하나의 아이디어를 프로그램 전체에서 일관된 방식으로 표현하는 통일성이라고 할 수 있다. 따라서 프로그램에서 대칭성을 찾아내서 명확히 표현해주면, 코드를 읽기가 수월해진다. &lt;br&gt;
때로 대칭성을 찾아서 표현하면 코드의 중복을 제거할 수 있다. 비슷한 아이디어가 사용되었다면 대칭성에 따라 아이디어를 일관된 방식으로 표현하고, 이는 중복되는 구현을 제거하는 기회가 될 수도 있다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;선언적-표현:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;선언적 표현&lt;/h5&gt;

&lt;p&gt;복잡한 로직이 없다면 수행되는 로직을 선언적 표현을 사용하여 명시하고, 이를 통해 코드를 직관적으로 쉽게 이해할 수 있도록 한다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;변화율:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;변화율&lt;/h5&gt;

&lt;p&gt;함께 변하는 로직과 데이터를 함께 관리하고, 변화율이 다른 로직과 데이터는 분리한다. 이는 로직과 데이터의 결합과는 다른 내용이다. 앞선 내용은 연관 관계에 대한 내용이며, 변화율은 시간적 대칭성으로 이해할 수 있다.(코드의 변화 주기로 생각하자)&lt;br&gt;
변화율은 로직과 데이터 뿐만 아니라 데이터와 데이터에도 적용된다. 하나의 객체에 있는 모든 필드는 가급적 함께 변해야 하고, 변화율이 다른 필드가 있다면 이를 적절하게 분리하여 별도의 객체로 관리하도록 한다. 이는 코드를 읽는 다른 사람에게 프로그래머의 의도를 잘 전달할 수 있고, 중복을 줄일 수 있다.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;클래스:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;클래스&lt;/h3&gt;

&lt;p&gt;클래스는 비슷한 성질을 가진 것을 총칭하며, 객체는 클래스가 구체화된 것이다.&lt;br&gt;
1. 로직을 클래스 단위로 어떻게 구성해야 하는지, 로직 사이의 차이점을 어떻게 효과적으로 표현해야 하는지 배워야 한다. &lt;br&gt;
2. 클래스 계층을 사용하는 것은 코드를 이해하는데 어려움을 준다. 따라서 효과적인 객체 지향 프로그래밍을 하기 위해서는 선별적으로 상속을 사용한다.&lt;br&gt;
3. 클래스는 비교적 값이 비싼 편이므로, 의미 있는 작업에만 클래스를 사용해야 한다. 클래스를 너무 비대하지 않게, 전체 클래스 개수를 줄이는 방향으로 프로그램을 개선한다.&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;단순한-상위클래스-이름:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;단순한 상위클래스 이름&lt;/h5&gt;

&lt;p&gt;적합한 이름은 코드를 단순화하고 향상시켜준다.&lt;br&gt;
1. 클래스 이름을 지을 때는 간결성과 표현성 사이에서 고민하며, 조금 더 정확한 의미를 전달하기 위해 몇 개의 단어를 사용해야 하는 경우도 있다.&lt;br&gt;
2. 메타포(metaphor, 은유)를 사용하여 단어 하나만으로 연상작용을 통해 여러 관련 정보와 내포된 의미를 전달한다.&lt;br&gt;
3. 중요한 클래스에 대해서는 한 단어로 된 이름을 사용하자.&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;한정적-하위클래스-이름:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;한정적 하위클래스 이름&lt;/h5&gt;

&lt;p&gt;하위클래스 이름은 상위클래스와의 유사점과 차이점을 나타내야 하고, 클래스의 이름은 코드의 내용을 반영해야 한다.&lt;br&gt;
1. 하위클래스는 최상위 클래스와는 달리 대화 중 잘 사용되지 않는다. &lt;br&gt;
2. 간결성보다는 표현성을 택하는 편이 낫다.&lt;br&gt;
3. 상위클래스에 한 두 개의 수식어를 붙여서 이름을 정한다.&lt;br&gt;
4. 하지만 그 자체로 프로그램의 중요한 개념을 의미하는 하위클래스는 상위클래스와 같이 단순한 이름을 사용해야 한다.&lt;br&gt;
5. 다단계 클래스 계층(multi-level hierarchy)의 이름은 가장 유사한 상위클래스의 이름을 바탕으로 짓는다.(위임을 통해 다단계 클래스 계층을 제거하면 더 좋다)&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;추상-인터페이스:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;추상 인터페이스&lt;/h5&gt;

&lt;p&gt;설계상의 결정을 필요 이상으로 노출하지 않기 위해 인터페이스에 맞춰 코딩한다.&lt;br&gt;
1. 인터페이스 추가에는 문서화 및 디버깅 등의 추가 비용이 발생하기 때문에 인터페이스를 통해 유연성을 얻을 수 있는 경우에만 인터페이스 비용을 지불한다.(실제로는 유연성이 필요하지 않은 경우가 많다)&lt;br&gt;
2. 인터페이스를 사용하게 된 경제적 이유는 소프트웨어는 예측하기 어렵다는 점을 들 수 있다. 하지만 예측을 통해 &amp;ldquo;미래에도 제대로 동작하는&amp;rdquo; 소프트웨어를 개발하는 데에는 한계가 있다.&lt;br&gt;
3. 결론은 필요해지는 경우에만 시스템에 유연성을 부여하자.(어렵다..)&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;인터페이스:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;인터페이스&lt;/h5&gt;

&lt;p&gt;인터페이스는 다중 상속을 통해 유연성을 제공하면서도 복잡성과 모호성을 갖고 있지 않는 메커니즘이다.&lt;br&gt;
1. 인터페이스는 구현의 수정은 쉽지만 인터페이스 자체의 수정은 매우 어렵다.&lt;br&gt;
2. 인터페이스가 커뮤니케이션에 방해가 되는 요소 중 한 가지는 모든 연산이 공용이어야 한다는 점이다.(공용이라는 말이 모든 메소드가 public이라는 의미인가??)&lt;br&gt;
3. 상위클래스와 하위클래스의 이름 정하는 방법으로 인터페이스의 이름을 정하는 방법이 있다. 장점은 인터페이스 구현과 상위클래스 상속 여부가 가려진다는 것이고, 단점은 좋은 이름을 인터페이스가 모두 사용하는 것이다.&lt;br&gt;
4. 인터페이스 사용 여부를 숨기는 것보다 구현 클래스이 이름을 간결하게 짓는 것이 중요할 경우 인터페이스 이름에 &amp;ldquo;I&amp;rdquo;를 붙이는 방법도 있다.&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;추상-클래스:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;추상 클래스&lt;/h5&gt;

&lt;p&gt;자바에서 인터페이스와 실제 구현의 차이를 나타내는 다른 방법은 상위클래스(런타임에 어떤 하위클래스로도 교체될지 모른다는 넓은 의미, not only abstract class)를 사용하는 것이다.(polymorphism)&lt;br&gt;
1. 추상클래스와 인터페이스의 사용 기준은 인터페이스 수정의 용이성과 단일 클래스가 여러 인터페이스를 지원할 것인지의 여부이다.&lt;br&gt;
2. 추상클래스는 인터페이스와는 달리 기존 설계를 망가뜨리지 않고 새로운 연산을 얼마든지 추가할 수 있다.&lt;br&gt;
3. 추상 클래스의 단점은 각 클래스가 단 1개의 상위클래스만을 지정할 수 있다는 것이다. 이는 다양한 인터페이스의 지원이 불가능함을 의미한다.&lt;br&gt;
4. 과도한 추상화는 필요없는 추상 클래스 계층을 만들어 낼 수 있다. 이는 최상위 클래스를 인스턴스화 가능한 클래스로 만들면 일부 해결 가능하다.&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;버전-인터페이스:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;버전 인터페이스&lt;/h5&gt;

&lt;p&gt;인터페이스를 수정하면 기존 인터페이스를 구현한 클래스는 사용하지 못하게 된다. 이를 해결하기 위한 방법은 인터페이스를 확장(extends)하여 대체 인터페이스를 생성하는 것이다. 하지만 대체 인터페이스는 달갑지 않은 문제(인터페이스 수정의 필요성)에 대한 달갑지 않은 해결책(유연성이 떨어진다)이다. 이는 자바를 올바르게 사용하는 것이라고 볼 수 없다.&lt;br&gt;
1. 인터페이스를 확장하면 새로운 사용자와 기존 사용자 모두 해당 인터페이스를 사용할 수 있다.&lt;br&gt;
2. 새로운 연산을 사용하는 경우, 객체의 타입을 확인한 후(reflection, instanceof) 타입 캐스팅이 필요하다. &lt;br&gt;
3. instanceof는 코드가 특정 클래스에 제한되므로 유연성이 떨어지지만 인터페이스의 개선이라는 측면에서 정당성을 갖는다.&lt;br&gt;
4. 새로 확장한 대체 인터페이스의 수가 많아지면 이는 설계를 수정할 때가 되었다는 신호이다.&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;값-객체-내용을-잘-이해하기-힘듬:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;값 객체(내용을 잘 이해하기 힘듬)&lt;/h5&gt;

&lt;p&gt;값 객체(값 스타일 객체)는 변화하는 상태를 지닌 객체가 아닌, 정수와 같이 상태가 변하지 않는 객체를 의미한다.&lt;br&gt;
1. 자바의 기본 타입은 대부분 수학의 세계에 속하며, 수학의 세계는 함수형 스타일 연산을 사용한다. 함수형 스타일(functional style)연산은 상태를 변화시키지 않고 새로운 값을 생성하는 것이다.&lt;br&gt;
2. 상황이 계속 변환다면 상태 객체(값 객체의 반대라고 생각하자)를, 일시적으로라도 고정적인 상황을 표현하고 싶다면 함수형 스타일을 사용하여 값 객체를 사용한다.&lt;br&gt;
3. 값 객체는 생성자에서만 모든 상태를 설정할 수 있고, 이를 다루는 연산은 언제나 새로운 객체를 반환한다.&lt;br&gt;
4. 값 객체는 매번 새롭게 생성되기 때문에 메모리 관리 시스템에 부담을 주어 성능상 문제를 일으킬 수 있다. &lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;특화:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;특화&lt;/h5&gt;

&lt;p&gt;대부분의 프로그램에서 사용하는 아이디어는 비슷한 점이 많다. 따라서 각 연산 간의 유사점과 차이점을 부각시켜 코드를 작성하면  프로그램을 읽고 수정하기 쉬워진다. 이는 사용자가 기존의 코드를 변형하고 특화시켜 재활용할지, 전혀 새로운 코드를 작성할지의 여부를 결정하는데 도움이 된다. &lt;br&gt;
연산(computaton) : imformation processing in general(wikipedia)
1. 가장 간단한 변형는 상태만 바꾸는 것이다. 수행되는 알고리즘은 변화하지 않는다.(데이터 타입만 바뀌는 경우. generics?)&lt;br&gt;
2. 가장 복잡한 변형는 로직을 바꾸는 것이다. 입력이 같아도 로직은 완전히 다르다.(generics도 포함될 수 있겠음. sort같은 알고리즘)
3. 대부분의 변형은 위의 두 가지의 극단적 변형 사이에 존재하며, 현실에서는 약간 변형된 입력 데이터를 사용하거나 약간 변형된 로직을 사용하는 경우가 많다.&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;하위클래스:ababa2ccd2a5041e1cd4b089e7065c53&#34;&gt;하위클래스&lt;/h5&gt;

&lt;p&gt;하위클래스는 기존 코드의 변형 중 한 방법으로 제대로 된 상위클래스를 갖고 있다면 강력한 힘을 발휘할 수 있다. 적당한 메소드를 오버라이드하여 기존 연산과는 다른 변형을 만들어 낼 수 있기 때문이다.&lt;br&gt;
1.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>summary to use git</title>
      <link>http://jhyoon0801.github.io/blogs/blogs/summary-to-use-git/</link>
      <pubDate>Fri, 25 Mar 2016 05:18:14 +0000</pubDate>
      
      <guid>http://jhyoon0801.github.io/blogs/blogs/summary-to-use-git/</guid>
      <description>

&lt;h3 id=&#34;git-사용-방법-정리:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Git 사용 방법 정리&lt;/h3&gt;

&lt;p&gt;Git의 기초 내용 정리와 사용하다 자주 까먹는 내용을 정리해 보자&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;기존-vcs와-차이점:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;기존 VCS와 차이점&lt;/h4&gt;

&lt;p&gt;기존 VCS와 Git의 차이점은 다음과 같다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;cvsc:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;&lt;strong&gt;CVSC&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;CVS, Subversion, Perforce, Bazaar 등의 시스템은 파일의 집합으로정보를 관리하고, 각 파일의 &lt;strong&gt;변화&lt;/strong&gt;를 다음 그림 처럼 시간순으로 관리한다&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-fNVALfocMUo/VviZqTUbhsI/AAAAAAAAAD8/VN9tL2TnCh4lROCZ3E_mAaFsJOUKaihZg/s0/1.png&#34; alt=&#34;enter image description here&#34; title=&#34;CVCS_방식.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;git:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Git은 CVCS와는 다르게 파일 시스템의 Snapshot과 같은 데이터를 저장한다( 크기가 아주 작음 )&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/--uGWmtZSfbQ/VviamZBVSnI/AAAAAAAAAEI/hx42b1ae-_U_Z3zuWsftuEJmeqYJR9fxQ/s0/1.png&#34; alt=&#34;DVCS 방식&#34; title=&#34;DVCS_방식.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Git은 파일이 존재하는 그 순간을 중요하게 여기며, 파일이 달라지지 않으면 성능을 위해 파일을 새롭게 저장하지 않고, 단지 이전 상태의 파일에 대한 링크만 저장한다&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;branches:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;&lt;strong&gt;Branches&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Git은 다른 VCS와 비교하여 Branches에 대한 강점이 많다. Git의 Branche 특징과 강점들을 살펴보자.
&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;git의-branches:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Git의 Branches&lt;/h4&gt;

&lt;p&gt;Git은 commit이 발생하면 해당 snapshot에 대한 포인터, 저자나 commit 메세지 같은 메터데이터, 이전 commit에 대한 포인터 등을 포함하는 &lt;strong&gt;commit object&lt;/strong&gt;를 저장한다.
최초 커밋을 제외한 commit object에는 이전 commit에 대한 포인터를 가지고 있기 때문에 변경된 사항을 파악할 수 있다. Branches를 합친 Merge commit object 같은 경우에는 이전 commit 포인터를 여러 개 갖는다.&lt;/p&gt;

&lt;p&gt;Git의 branche는 commit 사이를 이동하는 어떤 &lt;strong&gt;포인터&lt;/strong&gt;로 이해하면 이해가 쉽다. 최초의 commit이 발생하면 Git은기본적으로 master라는 이름의 branche를 만들고, 가장 마지막 commit을 가리키게 한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git branche &lt;code&gt;&amp;lt;branche 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 명령어를 통해 새로운 branche를 생성할 수 있고, 새로 만든 branche는 작업하고 있던 마지막 commit을 가리킨다. 또한 Git은 &amp;lsquo;HEAD&amp;rsquo;라는 특수한 포인터를 갖는다. 이 특수한 포인터는 지금 작업하고 있는 로컬 branche를 가리킨다. 위의 명령을 통해 branche를 새롭게 생성하더라도 &amp;lsquo;HEAD&amp;rsquo;는 원래 가리키고 있던 branche를 여전히 가리킨다. 작업 branche를 옮기기 위해서는 다음 명령을 사용한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git checkout &lt;code&gt;&amp;lt;branche 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;checkout 명령은 해당 branche로 이동하기 위하여 현재의 working directory에 파일들을 추가 및 삭제, 수정하여 변경을 원하는 snapshot으로 되돌려 놓는다.&lt;/p&gt;

&lt;p&gt;Git에서의 branche는 SHA-1 체크섬 파일에 불과하기 때문에 새로운 branche를 만든다는 것은 41바이트의 크기(40바이트 체크섬 + 줄바꿈) 파일을 하나 만드는 것 뿐이다. 이는 branche 생성 시 모든 소스 코드를 복사하는 다른 VCS와는 확연히 비교되며, 효율적인 측면에서 Git이 강점을 갖는 부분이다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의 :&lt;/strong&gt; checkout을 통해서 branche를 이동할 때는 커밋하지 않은 파일의 충돌 문제가 발생할 수 있기 때문에 working directory를 정리하고 checkout 작업을 수행한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;git의-merge:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Git의 Merge&lt;/h4&gt;

&lt;p&gt;branche를 생성하여 작업하고, 변경된 내용을 하나로 합치기 위하여 Merge를 수행한다. Merge 명령은 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git merge &lt;code&gt;&amp;lt;branche 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위의 명령을 수행하면 현재 작업 중인 branche에 명령에서 지정한 branche를 Merge 한다.(Merge 수행 후 현재 작업 중인 branche는 Merge된 결과의 새로운 snapshot을 가리킨다) Git은 Merge할 각 branche가 가리키는 두 개의 snapshot과 공통 조상 snapshot을 사용하여 3-way Merge를 진행한다. ( *참고 :  Fast Forward ) Merge를 수행하면 Merge 결과인 나타내는 새로운 snapshot이 생성되며(commit 및 새로운 snapshot이 생성) 이를 Merge commit이라고 한다. Merge 완료 후 삭제는 다음 명령을 통해 수행한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git branch -d &lt;code&gt;&amp;lt;branche 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;각 branche에서 파일의 동일한 부분을 수정하여 Merge가 실패하면, Git은 충돌 메세지를 출력해준다. 이 내용은 git status 명령을 통해 어느 시점에서든 확인할 수 있다. 충돌을 해결한 후 merge tool을 사용하여 충돌 파일을 Staging Area에 등록하고, 사용자가 commit을 진행하면 commit 메세지에는 충돌에 관련한 내용이 자동으로 삽입된다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;branche-workflow:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Branche workflow&lt;/h4&gt;

&lt;p&gt;Git에서의 branche workflow에 대한 내용을 이해하자
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;long-running-branche:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Long-Running branche&lt;/h5&gt;

&lt;p&gt;장기간에 걸쳐 프로젝트를 진행할 때, 배포했거나 배포할 코드들만 master branche에 Merge해서 안정 버전의 코드만 master branche에 두고, 개발을 위해서 develop이나 next라는 branche를 사용한다. develop이나 next는 충분한 테스트를 거쳐 안정성을 검증한 후 master에 Merge한다. 또한 규모가 큰 프로젝트에서는 propsed 혹은 pu(proposed updates)라는 중간 단계의 branche를 생성하고 개발중이고 테스트를 거쳤지만 아직 master에는 Merge하지 않는 단계의 버전을 임시 저장하는 workflow를 생각할 수 있다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;topic-branche:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Topic branche&lt;/h5&gt;

&lt;p&gt;Topic branhce는 프로젝트의 크기에 상관없이 사용되며 어떤 한 가지 주제나 작업을 위해 만든 짧은 호흡의 branche를 의미한다. 이는 Git branche의 가벼움 이라는 장점을 이용한 것이다.
&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;리모트-branche:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;리모트 branche&lt;/h4&gt;

&lt;p&gt;리모트 branche란 리모트 저장소에 있는 branche를 의미한다. 이는 리모트 저장소에서 마지막으로 데이터를 가져온 시점의 branche 상태를 알려주는 책갈피라고 볼 수 있다. 따라서 리모트 branche는 리모트 저장소를 fetch 하기 전까지는 변하지 않는다.(단, fetch를 진행하여도 리모트 저장소에 수정이 있을 경우에만 변경)
리모트 branche의 단축 이름은 (remote)/(branche) 형식으로 설정된다.&lt;/p&gt;

&lt;h5 id=&#34;push-하기:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Push 하기&lt;/h5&gt;

&lt;p&gt;로컬의 branche를 서버로 push하기 위해서는 권한이 필요하고, 로컬 저장소의 branche는 자동으로 리모트 저장소에 전송되지 않기 때문에 사용자가 명시적으로 push를 수행해야 한다.  push는 다음의 명령을 사용하여 수행한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git push &lt;code&gt;&amp;lt;remote&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;local-branche&amp;gt;&lt;/code&gt;:&lt;code&gt;&amp;lt;remote-branche&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;$git push &lt;code&gt;&amp;lt;remote&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;branche&amp;gt;&lt;/code&gt; =&amp;gt; 간단히 이렇게 사용 가능&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;리모트 저장소를 fetch하여 새로운 branche를 가져오더라도, 이는 수정하지 못하는 branche이다. 이 새로운 branche를 사용하여 작업을 하기 위해선 로컬에 새로운 branche를 생성하거나, 기존 로컬 branche에 Merge를 진행해야 함을 주의하자.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;branche-tracking-및-삭제:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;branche tracking 및 삭제&lt;/h5&gt;

&lt;p&gt;바로 위에서 리모트 저장소에 push를 할 때, 그리고 새로운 branche를 fetch하였을 때 사용자가 수동으로 신경써야할 사항이 있었다.(push 시 파라미터 입력 / fetch 후 로컬 branche 생성 혹은 Merge)
하지만 branche tracking을 사용하면, 리모트 branche와 로컬 branche를 연결시켜주고, 그 이후의 push나 pull 명령을 통해 추가 파라미터를 입력하지 않고 원하는 동작을 수행할 수 있게 해준다. Git은 서버로부터 Clone을 수행할 경우 master branhce에 대한 tracking을 자동으로 수행한다. 추가 다른 branche에 대한 tracking을 하기 위해서는 다음 명령을 사용한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git checkout &lt;code&gt;--track&lt;/code&gt; &lt;code&gt;&amp;lt;branche&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;remotename&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;branche&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;협업 완료 후 리모트 branche를 삭제하기 위해서는 다음 명령을 사용한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git push &lt;code&gt;&amp;lt;remote&amp;gt;&lt;/code&gt; :&lt;code&gt;&amp;lt;remote-branche&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 명령을 수행하면 리모트 저장소의 branche를 삭제할 수 있고, 이는 &amp;lsquo;로컬에서 빈 내용을 리모트 branche에 채워 넣어라&amp;rsquo;로 쉽게 이해할 수 있다.
&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;rebase:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Rebase&lt;/h4&gt;

&lt;p&gt;Git에서 branche를 합치는 방법은 Merge와 Rebase 두 가지가 있다. Rebase의 특징을 알아보자.&lt;/p&gt;

&lt;h5 id=&#34;git의-rebase:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Git의 rebase&lt;/h5&gt;

&lt;p&gt;Rebase는 Merge와 비슷한 결과를 만드는 방식으로, 동작 방식은 다음과 같다.
&lt;img src=&#34;https://lh3.googleusercontent.com/-2N9L6A_VIWA/Vv3job8SNWI/AAAAAAAAAFE/5qcm3r59heg-kd1s3Vna9KjRaAe_TOB5g/s0/rebase.png&#34; alt=&#34;enter image description here&#34; title=&#34;rebase.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;두 branche(C3, C4)가 나뉘기 전인 공통 commit(C2)로 이동하고 나서, 그 commit부터 지금 Checkout한 branche가 가리키는 commit까지 diff를 차례대로 만들어 이를 임시저장한다. 그리고 이 변화부분을 taget branche에 차례대로 적용한다. 그리고 그 target branche를 Merge하여하여 Fast-forward 시킨다. Rebase의 명령은 다음과 같다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git rebase &lt;code&gt;&amp;lt;target-branche&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;source-branche&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;$git checkout &lt;code&gt;&amp;lt;target-branche&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;$git merge &lt;code&gt;&amp;lt;source-branche&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rebase는 branche의 변경사항을 순서대로 다른 branche에 적용하면서 합치고,  Merge의 경우는 두 branche의 최종 결과만을 가지고 합친다. Rebase를 사용하면 commit 히스토리도 반영되기 때문에, 리모트 branche에 commit을 깔끔하게 적용하고 싶을 때 사용된다.
&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;rebase-사용-시-주의-사항:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Rebase 사용 시 주의 사항&lt;/h5&gt;

&lt;p&gt;Rebase는 장점이 많은 기능이지만 다음 내용은 정말 주의하여야 한다.
&lt;strong&gt;이미 공개 저장소에 Push한 commit을 Rebase 하지 마라&lt;/strong&gt;
새로운 커밋을 리모트 저장소에 Push하고, 이를 동료가 Pull하여 작업을 하는 상황을 생각해보자. 이미 commit된 내용을 rebase를 사용하여 push해 버리면 brance구조의 변경이 일어나고, 당신의 동료는 이 내용을 자신의 작업 branche에 Merge를 하고 push해야한다. 이는 동료의 push 후 당신이 pull할 때도 동료의 push로 인한 변경 내용에 대해 당신은 다시 한 번 Merge를 진행해야 하는 엄청나게 번거로운 일들이 발생한다. 따라서 위의 주의 사항을 어길 시 당신은 협업하는 동료에게 엄청난 욕을 먹을 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;git-환경-설정-하기:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Git 환경 설정 하기&lt;/h3&gt;

&lt;p&gt;Git 설치 후 사용 환경 설정을 진행해야 한다. 이는 최초 1회만 진행하면 되며, 설치된 Git의 버전을 업그레이드하더라도 기존 설정이 유지된다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/gitconfig : 시스템의 &lt;strong&gt;모든 사용자&lt;/strong&gt;와 &lt;strong&gt;모든 저장소&lt;/strong&gt;에 적용되는 설정. git config  &lt;code&gt;--&lt;/code&gt;system 옵션 사용&lt;/li&gt;
&lt;li&gt;~/.gitconfig : &lt;strong&gt;특정 사용자&lt;/strong&gt;에게만 적용되는 설정. git config &lt;code&gt;--&lt;/code&gt;global 옵션 사용&lt;/li&gt;
&lt;li&gt;.git/config : 이 파일은 Git Directory 내에 있고, &lt;strong&gt;특정 저장소&lt;/strong&gt;에만 적용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각 설정의 우선순위는 위의 정리된 항목의 &lt;strong&gt;역순&lt;/strong&gt;이다. ( .git/config &amp;gt; ~/.gitconfig &amp;gt; /etc/gitconfig )&lt;/p&gt;

&lt;p&gt;다음 명령을 통해 설정 내용을 확인할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git config &lt;code&gt;--&lt;/code&gt;list&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;git-사용-방법-정리-1:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Git 사용 방법 정리&lt;/h3&gt;

&lt;h4 id=&#34;git-저장소-만들기:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Git 저장소 만들기&lt;/h4&gt;

&lt;p&gt;Git저장소를 만드는 방법은 두 가지 이며, 기존에 있는 프로젝트에 Git repository를 만드는 방법과 다른 서버의 Git repository를 clone 하는 방법이 있다.
&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;1-이미-있는-디렉토리에-새-저장소-만들기:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;1. 이미 있는 디렉토리에 새 저장소 만들기&lt;/h4&gt;

&lt;p&gt;추가하려는 디렉토리로 이동하여 다음 명령을 실행한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ git init&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 명령은 .git이라는 하위디렉토리를 만들며, 디렉토리에는 저장소를 이루는 뼈대가 있는 파일(Skeleton)이 들어 있다.
이 후 파일들의 버전 관리를 위하여 저장소에 파일 추가, 커밋 등을 진행 한다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ git add *.go&lt;/p&gt;

&lt;p&gt;$ git add README&lt;/p&gt;

&lt;p&gt;$ git commit -m &amp;lsquo;initial project version&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-이미-있는-저장소를-clone하기:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;2. 이미 있는 저장소를 clone하기&lt;/h4&gt;

&lt;p&gt;다른 프로젝트에 contribute하거나 Git 저장소를 복사할 때 사용된다. 다음은 예제이다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git clone git://github.com/schacon/grit.git mygrit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Git은 git:// 프로토콜 이외에도 http(s)://나 user@server:/path.git 처럼 ssh도 사용할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;파일-상태와-라이프-사이클:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;파일 상태와 라이프 사이클&lt;/h4&gt;

&lt;p&gt;작업 디렉토리의 모든 파일은 Tracked(관리대상)과 Untracked(비관리대상)으로 나눌 수 있다. Tracked 파일은 이미 snapshot에 포함되 있던 파일을 나타낸다. 다음 그림은 파일의 라이프 사이클을 나타낸다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-NvvfqOEHB4o/Vvi6IyWNUtI/AAAAAAAAAEw/5z-Y4r8dTM43oxqV0KV-cqfeI9EiD65wA/s0/1.png&#34; alt=&#34;enter image description here&#34; title=&#34;git_file_life_cycle.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
commit 수행 시 -a 옵션을 줄 경우 Tracked 된 파일 중 수정된 모든 파일을 commit 한다. -a 옵션을 주지 않을 경우 staging area에 등록되어 있지 않은 파일은 장소에 반영되지 않음을 유의하자. commit을 수행할 때 -m 옵션으로 commit 메세지를 입력할 수 있고, 이를 생략할 경우 default 편집기가 실행되며 commit 메세지를 입력하게 한다. 다음 명령을 통해 commit을 수행할 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git commit -m &amp;lt;commit message&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;git-명령어-정리:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;&lt;strong&gt;Git 명령어 정리&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;상태-조회:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;상태 조회&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git status&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;git repository의 상태를 확인한다. Tracked, Untracked, modified 등의 git repository 내의 파일들의 상태를 확인한다. &amp;lsquo;Changes to be committed&amp;rsquo;에 속한 파일들은 staged 상태라는 것을 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;새-파일-추적-및-staged-변경:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;새 파일 추적 및 staged 변경&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git add &lt;code&gt;&amp;lt;file or directory&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Untracked 파일(디렉토리)을 Tracked 파일(디렉토리)로 만들기 위해 사용하고, 이미 Tracked된 파일(디렉토리)이 modified상태일 때 staged로 변경하기 위해 사용된다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;주의 :&lt;/strong&gt; modified된 파일을 staged로 변경 한 후 commit 전에 해당 파일을 다시 수정한다면, git add를 &lt;strong&gt;한 번 더&lt;/strong&gt; 해줘야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;파일의-변경-내용-확인:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;파일의 변경 내용 확인&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git diff&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;작업 디렉토리&lt;/strong&gt;와 &lt;strong&gt;Staging Area&lt;/strong&gt;에 있는 수정된 파일을 비교한다. 즉 파일 수정 후 staged로 만든 후, 곧 바로 diff 명령을 수행하면 작업 디렉토리와 Staging Area에 있는 파일의 내용이 동일하기 때문에 아무것도 출력되지 않는다.&lt;/p&gt;

&lt;p&gt;커밋 전 &lt;strong&gt;Staging Area&lt;/strong&gt;와 &lt;strong&gt;저장소&lt;/strong&gt;의 내용을 비교하기 위해서는 &lt;code&gt;--staged&lt;/code&gt; 옵션을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;커밋-하기:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;커밋 하기&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git commit -m &lt;code&gt;&amp;lt;commit message&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Staging Area에 있는 파일들만을 저장소에 commit 한다. (Staging Area에 있는 파일 뿐 아니라 수정된 모든 Tracked 파일을 commit 하기 위해서는 -a 옵션을 사용한다.)&lt;/p&gt;

&lt;p&gt;-v 옵션을 사용하면, diff 내용도 commit message로 출력된다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;파일-삭제:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;파일 삭제&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git rm &lt;code&gt;&amp;lt;file or directory&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Git 저장소의 파일 및 로컬 파일도 함께 삭제 된다. Git 저장소의 파일만 삭제하기 위해선 &lt;code&gt;--&lt;/code&gt;cached 옵션을 사용한다. file-glob 패턴을 사용하여 여러 파일을 삭제할 수 있다. ( ex] *.log )&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;파일-이름-변경:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;파일 이름 변경&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git mv &lt;code&gt;&amp;lt;old_file_name&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;new_file_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;파일 이름을 변경하면 변경된 내용이 Staging Area에 저장된다. Git 저장소에 반영하기 위해서는 commit이 필요함. ( 내부적으로 mv -&amp;gt; git rm -&amp;gt; git add 의 3단계가 진행된다. )&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;commit-히스토리:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;commit 히스토리&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git log&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;commit 히스토리를 최신 순서로 정렬하여 출력한다.  Git은 pager류의 프로그램을 거쳐서 조회 내용을 출력하기 때문에 모든 commit 히스토리를 출력하지는 않는다. 여러 옵션을 사용할 수 있고, 다음은 자주 사용되는 각 옵션에 대한 간략한 설명이다.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;옵션&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;-p&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;각 commit의 diff 결과를 함께 보여준다&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;--stat&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;각 commit의 통계 정보(수정된 파일, 수정된 파일 개수, 변경된 라인 수 등)을 함께 보여준다&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;--pretty&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;지정된 포맷으로 출력한다.(ex] oneline, format:&amp;ldquo;%h - %an, %ar %s&amp;rdquo; 등 )&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;기타 필터&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;--since&lt;/code&gt;, &lt;code&gt;--after&lt;/code&gt;, &lt;code&gt;--untile&lt;/code&gt;, &lt;code&gt;--before&lt;/code&gt;, &lt;code&gt;--author&lt;/code&gt;, &lt;code&gt;--comiter&lt;/code&gt; 등의 옵션을 사용할 수 있다&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;commit-수정:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;commit 수정&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git commit &lt;code&gt;--amend&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이미 commit 최근 내용을 수정한다. Staging Area의 내용으로 수정하며, 만약 Staging Area에 수정 사항이 없다면 commit 메세지만 수정한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;staging-area-수정:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Staging Area 수정&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git reset HEAD &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;현재 Staging Area에 추가된 파일을 unstaged로 변경한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;파일-되돌리기:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;파일 되돌리기&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git checkout &lt;code&gt;--&lt;/code&gt; &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;modified상태의 파일을 수정 전으로 되돌린다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;리모트-저장소-확인:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;리모트 저장소 확인&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git remote&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;현재 프로젝트와 연관된 remote list를 조회할 수 있다. -v 옵션을 사용하여 URL도 함께 확인 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;리모트-저장소-추가:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;리모트 저장소 추가&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git remote add &lt;code&gt;&amp;lt;리모트 저장소 단축 이름&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;URL&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;현재 프로젝트에 새로운 리모트 저장소를 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;리모트-저장소-pull-fetch:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;리모트 저장소 pull, fetch&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git fetch(pull) &lt;code&gt;&amp;lt;리모트 저장소 단축 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;해당 명령을 통해 지정된 리모트 저장소에서 로컬에는 없는 데이터를 가져온다. fetch 명령의 경우 리모트 저장소의 데이터를 가져온 후 merge를 진행하지 않고, pull은 진행한다는 차이가 있다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;리모트-저장소-push:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;리모트 저장소 push&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git push &lt;code&gt;&amp;lt;리모트 저장소 단축 이름&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;로컬 브랜치&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;단축 이름에 해당하는 리모트 저장소에 지정된 로컬 브랜치를 push 한다. 리모트 저장소에 push가 있었을 경우, merge를 먼저 진행 후 push를 진행해야 한다.(충돌의 위험성)&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;리모트-저장소-정보-확인:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;리모트 저장소 정보 확인&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git remote show &lt;code&gt;&amp;lt;리모트 저장소 단축 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;리모트-저장소-이름-변경:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;리모트 저장소 이름 변경&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git remote rename &lt;code&gt;&amp;lt;리모트 저장소 이전 단축 이름&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;리모트 저장소 변경 단축 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;리모트-저장소-삭제:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;리모트 저장소 삭제&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git remote rm &lt;code&gt;&amp;lt;리모트 저장소 단축 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;tag-조회:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Tag 조회&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git tag&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이미 만들어져 있는 tag를 조회할 수 있다. -l 옵션으로 검색 패턴을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$git show &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;특정 version의 tag에 대한 상세 내용을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;annotated-tag-붙이기:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Annotated Tag 붙이기&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git tag -a &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; -m &lt;code&gt;&amp;lt;메세지&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Annotated Tag는 Git 데이터베이스에 Tag를 만든 사람의 이름, 이메일, Tag 생성 날짜, Tag 메세지를 함께 생성한다. GPG(GNU Privacy Guard)로 서명할 수 있고, -a 대신 -s 옵션을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;lightweight-tag-붙이기:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Lightweight Tag 붙이기&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git tag &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-a, -s, -m 옵션을 사용하지 않고, 단순히 커밋 정보(체크섬)만 저장한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;snapshot-tagging:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;snapshot tagging&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git tag -a &lt;code&gt;&amp;lt;verson&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;체크섬&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이미 커밋된 이전 버전의 snapshot에 tagging할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;push-tag:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;push Tag&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git push &lt;code&gt;&amp;lt;리모트 저장소 단축 이름&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;tag version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;push 명령은 리모트 저장소에 자동으로 Tag를 전송하지 않는다. &lt;code&gt;--tags&lt;/code&gt; 옵션을 사용하면, 리모트 저장소에 없는 모든 Tag 정보를 전송한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;git-alias:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Git Alias&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;ex) $git config --global alias.co checkout
    $git config --global alias.unstage &#39;reset HEAD --&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 예시를 참고하여 Git 명령어에 alias를 생성할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;branch-조회:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Branch 조회&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git branch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;현재 프로젝트의 branche list를 조회한다. -v 옵션을 사용하면 각 branche의 마지막 commit 메세지도 함께 보여준다. &lt;code&gt;--merged&lt;/code&gt;와 &lt;code&gt;--no-merged&lt;/code&gt;옵션을 사용하면 현재 Checkout한 branche를 기준으로 Merge 혹은 Merge가 되지 않았는지 필터링해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;branch-생성:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Branch 생성&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git branche &lt;code&gt;&amp;lt;branche 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;새로운 branche를 생성한다. 하지만 HEAD는 새로 생성한 branche가 아닌 기존의 branche를 가리킨다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;branche-이동-head-포인터-이동:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Branche 이동( HEAD 포인터 이동 )&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git checkout &lt;code&gt;&amp;lt;branche 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;branche간 이동을 수행한다. 이는 곧 HEAD 포인터의 이동을 뜻한다.  -b 옵션을 추가하면 새로운 branche를 생성한 후 새롭게 생성된 branche로 HEAD 포인터를 이동하도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;branche-삭제:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Branche 삭제&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git branche -d &lt;code&gt;&amp;lt;branche 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;branche를 삭제한다. Merge 하지 않은 Branche를 삭제하기 위해서는 -d 대신 -D를 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h5 id=&#34;merge:6079bd2b1a3140ad7c7d8b2b573633f0&#34;&gt;Merge&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;$git merge &lt;code&gt;&amp;lt;branche 이름&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HEAD가 가리키는 현재 branche에 지정한 branche를 3-Way-Merge한다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>